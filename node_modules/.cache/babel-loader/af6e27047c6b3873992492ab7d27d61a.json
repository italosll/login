{"ast":null,"code":"var _jsxFileName = \"/home/italo/myhelpbuddy/login/src/pages/Login/index.js\";\nimport React, { useState } from 'react';\nimport './index.css';\nimport logo from '../../assets/images/logo.png';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nfunction aut(error) {\n  // console.log(1,error,\"dfsgfdg\", error.email , error.poassword);\n  if (typeof error.email) {\n    console.log(\"/raiz\");\n  } else {\n    console.log(\"/users\", error.email, error.poassword);\n  }\n}\n\nfunction Login() {\n  const [users, setUsers] = useState(\"\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email().required(\"Required\"),\n      password: Yup.string().min(8, \"min 8\").required(\"Required\")\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit\n    } = props;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      style: {\n        display: \"block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"email\",\n      type: \"text\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.email && touched.email ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, errors.email), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"password\",\n      style: {\n        display: \"block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"password\",\n      type: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.password && touched.password ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, errors.password), aut(errors), !(errors.password && errors.email) && /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }));\n}\n\nexport default Login;","map":{"version":3,"sources":["/home/italo/myhelpbuddy/login/src/pages/Login/index.js"],"names":["React","useState","logo","Link","Formik","Yup","aut","error","email","console","log","poassword","Login","users","setUsers","password","object","shape","string","required","min","props","values","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","display"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './index.css'\nimport logo from '../../assets/images/logo.png'\nimport { Link } from 'react-router-dom'\nimport {Formik} from 'formik';\nimport * as Yup from 'yup';\n\nfunction aut(error){\n  // console.log(1,error,\"dfsgfdg\", error.email , error.poassword);\n\n  if(typeof(error.email) )       \n  \n  \n  \n  {\n    console.log(\"/raiz\", )\n  }else{\n    console.log(\"/users\", error.email , error.poassword)\n  }\n  \n}\n\nfunction Login(){\n\n    const [users, setUsers] = useState(\"\");\n\n    return (\n\n        <div className=\"app\">\n\n\n    <Formik\n      initialValues={{ email: \"\", password:\"\" }}\n\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email()\n          .required(\"Required\"),\n\n        password: Yup.string()\n            .min(8,\"min 8\")\n            .required(\"Required\")\n      })}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = props;\n        return (\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"email\" style={{ display: \"block\" }}>\n              Email\n            </label>\n            <input\n              id=\"email\"\n              type=\"text\"\n              value={values.email}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              className={\n                errors.email && touched.email\n                  ? \"text-input error\"\n                  : \"text-input\"\n              }\n            />\n\n            {errors.email && touched.email && (\n              <div className=\"input-feedback\">{errors.email}</div>\n            )}\n\n            <label htmlFor=\"password\" style={{ display: \"block\" }}>\n              Password\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              value={values.password}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              className={\n                errors.password && touched.password\n                  ? \"text-input error\"\n                  : \"text-input\"\n              }\n            />\n\n            {errors.password && touched.password && (\n              <div className=\"input-feedback\">{errors.password}</div>\n            )}\n\n            {aut(errors)}\n\n\n            \n              {!(errors.password && errors.email) && (\n                <Link to=\"/\"  disabled={isSubmitting}>Submit</Link>\n              )}\n\n            \n            \n\n            \n\n\n          </form>\n        );\n      }}\n    </Formik>\n\n  </div>\n);\n    \n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}